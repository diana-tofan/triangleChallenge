{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","side1","side2","side3","triangleType","side1Err","side2Err","side3Err","triangleErr","_this2","onKeyDown","ev","side","value","target","includes","keyCode","indexOf","preventDefault","setState","defineProperty","validateLengths","sides","filter","i","nr","key","concat","message","isValid","length","react_default","a","createElement","data-ts","className","classNames","ts-error","type","onClick","_this2$state","parseFloat","isTriangle","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.2bd85af3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      side1: '',\n      side2: '',\n      side3: '',\n      triangleType: '',\n      side1Err: '',\n      side2Err: '',\n      side3Err: '',\n      triangleErr: ''\n    }\n  }\n\n  render() {\n    const onKeyDown = (ev, side) => {\n      const value = ev.target.value;\n      // Ensure the input string is a valid floating point number\n      if ([69, 187, 188, 189].includes(ev.keyCode) || // prevent 'e', '=', ',' and '-' from being typed\n        (ev.keyCode === 190 && value.indexOf('.') !== -1)) { // allow only one dot\n        ev.preventDefault();\n      } else {\n        this.setState({\n          [side]: value\n        });\n      }\n    };\n\n    const isTriangle = (side1, side2, side3) => {\n      if ((side1 + side2 > side3) && (side1 + side3 > side2) && (side2 + side3 > side1)) { // triangle inequality theorem\n        this.setState({\n          triangleErr: ''\n        });\n        return true;\n      } else {\n        this.setState({\n          triangleErr: 'Sum of two side lengths should always be greater than third side'\n        });\n        return false;\n      }\n    };\n\n    const validateLengths = sides => { // 'sides' is an array containing the 3 side lengths\n      // Function that verifies if a given side length is valid\n      const isValid = (side, nr) => { // side = side length, nr = side index (1, 2 or 3)\n        const key = `side${nr}Err`;\n        let message = ''; // error message is initially empty\n        if (side === 0) { // if side length is 0\n          message = 'Input field is null';\n        } else if (side === '') { // if side length is empty\n          message = 'Input field is empty';\n        } else if (side < 0) { // if side length is negative\n          message = 'Input field should be positive';\n        }\n        this.setState({\n          [key]: message // we update the error message\n        });\n        return message === ''; // if error message is still empty, then the side length is valid\n      };\n      // We filter out the invalid lengths from the 'sides' array\n      // If the array stays untouched (i.e. still contains 3 items), then all triangle lengths are valid\n      return sides.filter((side, i) => isValid(side, i + 1)).length === 3;\n    };\n\n    const getTriangleType = () => {\n      let triangleType = '';\n      let { side1, side2, side3 } = this.state; // triangle side lengths\n      // Convert the user input strings to numbers (if they are not empty)\n      side1 = !!side1 ? parseFloat(side1) : side1;\n      side2 = !!side2 ? parseFloat(side2) : side2;\n      side3 = !!side3 ? parseFloat(side3) : side3;\n      /* Before determining the triangle type, we perform two kinds of validation:\n          validateLengths - ensures the given side lengths are greater than 0 and not empty\n          isTriangle - checks whether the given side lengths can form a triangle (based on triangle inequality theorem)\n      */\n      if (validateLengths([side1, side2, side3]) && isTriangle(side1, side2, side3)) {\n        if (side1 === side2 && side2 === side3 && side1 === side3) { // if all three sides are equal\n          triangleType = 'equilateral';\n        } else if (side1 === side2 || side2 === side3 || side1 === side3) { // if two sides are equal\n          triangleType = 'isosceles';\n        } else { // if no sides are equal\n          triangleType = 'scalene';\n        }\n      }\n      this.setState({\n        triangleType\n      });\n    };\n\n    return (\n      <div>\n        <div data-ts='Board' className='board'>\n          <div data-ts='Panel'>\n          <form data-ts='Form'>\n            <fieldset className='ts-fieldset'>\n              <label className={classNames({'ts-error': this.state.side1Err || this.state.triangleErr})}>\n                <span>Side 1</span>\n                <input\n                  type='number'\n                  onKeyDown={ev => onKeyDown(ev, 'side1')}\n                />\n              </label>\n              {\n                !!this.state.side1Err &&\n                <dl className='ts-errors'>\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side1Err}</dd>\n                </dl>\n              }\n            </fieldset>\n            <fieldset className='ts-fieldset'>\n              <label className={classNames({'ts-error': this.state.side2Err || this.state.triangleErr})}>\n                <span>Side 2</span>\n                <input\n                  type='number'\n                  onKeyDown={ev => onKeyDown(ev, 'side2')}\n                />\n              </label>\n              {\n                !!this.state.side2Err &&\n                <dl className='ts-errors'>\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side2Err}</dd>\n                </dl>\n              }\n            </fieldset>\n            <fieldset className='ts-fieldset'>\n              <label className={classNames({'ts-error': this.state.side3Err || this.state.triangleErr})}>\n                <span>Side 3</span>\n                <input\n                  type='number'\n                  onKeyDown={ev => onKeyDown(ev, 'side3')}\n                />\n              </label>\n              {\n                !!this.state.side3Err &&\n                <dl className='ts-errors'>\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side3Err}</dd>\n                </dl>\n              }\n            </fieldset>\n            <div className='button-wrapper'>\n              <button\n                data-ts='Button'\n                className='ts-primary'\n                onClick={getTriangleType}\n              >\n                <span>Get triangle type</span>\n              </button>\n            </div>\n          </form>\n          {\n            !!this.state.triangleType &&\n            <div className='triangle-type'>\n              Triangle is <b>{this.state.triangleType}</b>\n            </div>\n          }\n            {\n              !!this.state.triangleErr &&\n              <dl className='ts-errors triangle-type triangle-error'>\n                <dt><b>Invalid triangle</b></dt>\n                <dd>{this.state.triangleErr}</dd>\n              </dl>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}