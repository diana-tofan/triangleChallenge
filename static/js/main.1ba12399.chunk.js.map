{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","side1","side2","side3","triangleType","side1Err","side2Err","side3Err","_this2","onChange","ev","side","setState","defineProperty","target","value","react_default","a","createElement","data-ts","className","classNames","ts-error","type","message","onClick","_this2$state","isValid","nr","key","concat","validateLengths","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.1ba12399.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      side1: '',\n      side2: '',\n      side3: '',\n      triangleType: '',\n      side1Err: false,\n      side2Err: false,\n      side3Err: false\n    }\n  }\n\n  render() {\n    const onChange = (ev, side) =>\n      this.setState({\n        [side]: ev.target.value\n      });\n\n    const validateLengths = (side1, side2, side3) => {\n      const isValid = (side, nr) => {\n        const key = `side${nr}Err`;\n        if (side === '') {\n          this.setState({\n            [key]: {\n              message: 'Input field is empty'\n            }\n          });\n        } else if (side <= 0) {\n          this.setState({\n            [key]: {\n              message: 'A positive number is required'\n            }\n          });\n        }\n      };\n      isValid(side1, '1');\n      isValid(side2, '2');\n      isValid(side3, '3');\n      return !this.state.side1Err && !this.state.side2Err && !this.state.side3Err;\n    };\n\n    const getTriangleType = () => {\n      this.setState({\n        side1Err: false,\n        side2Err: false,\n        side3Err: false\n      });\n      const { side1, side2, side3 } = this.state;\n      if (validateLengths(side1, side2, side3)) {\n        if (side1 === side2 && side2 === side3 && side1 === side3) {\n          this.setState({\n            triangleType: 'equilateral'\n          });\n        } else if (side1 === side2 || side2 === side3 || side1 === side3) {\n          this.setState({\n            triangleType: 'isosceles'\n          });\n        } else {\n          this.setState({\n            triangleType: 'scalene'\n          });\n        }\n      }\n    };\n\n    return (\n      <div>\n        <div data-ts=\"Board\" className=\"board\">\n          <div data-ts=\"Panel\">\n          <form data-ts=\"Form\">\n            <fieldset className=\"ts-fieldset\">\n              <label className={classNames({'ts-error': this.state.side1Err})}>\n                <span>Side 1</span>\n                <input\n                  type=\"number\"\n                  onChange={ev => onChange(ev, 'side1')}\n                />\n              </label>\n              {\n                this.state.side1Err &&\n                <dl className=\"ts-errors\">\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side1Err.message}</dd>\n                </dl>\n              }\n            </fieldset>\n            <fieldset className=\"ts-fieldset\">\n              <label className={classNames({'ts-error': this.state.side2Err})}>\n                <span>Side 2</span>\n                <input\n                  type=\"number\"\n                  onChange={ev => onChange(ev, 'side2')}\n                />\n              </label>\n              {\n                this.state.side2Err &&\n                <dl className=\"ts-errors\">\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side2Err.message}</dd>\n                </dl>\n              }\n            </fieldset>\n            <fieldset className=\"ts-fieldset\">\n              <label className={classNames({'ts-error': this.state.side3Err})}>\n                <span>Side 3</span>\n                <input\n                  type=\"number\"\n                  onChange={ev => onChange(ev, 'side3')}\n                />\n              </label>\n              {\n                this.state.side3Err &&\n                <dl className=\"ts-errors\">\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side3Err.message}</dd>\n                </dl>\n              }\n            </fieldset>\n            <div className='button-wrapper'>\n              <button\n                data-ts=\"Button\"\n                className=\"ts-primary\"\n                onClick={getTriangleType}\n              >\n                <span>Get triangle type</span>\n              </button>\n            </div>\n          </form>\n          {\n            !!this.state.triangleType && !this.state.side1Err && !this.state.side2Err && !this.state.side3Err &&\n            <div className='triangle-type'>\n              Triangle is <b>{this.state.triangleType}</b>\n            </div>\n          }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}