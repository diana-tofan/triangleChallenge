{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","side1","side2","side3","triangleType","side1Err","side2Err","side3Err","_this2","onChange","ev","side","setState","defineProperty","target","value","react_default","a","createElement","data-ts","className","classNames","ts-error","type","message","onClick","_this2$state","isValid","nr","key","concat","validateLengths","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fd940c2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      side1: '',\n      side2: '',\n      side3: '',\n      triangleType: '',\n      side1Err: false,\n      side2Err: false,\n      side3Err: false\n    }\n  }\n\n  render() {\n    const onChange = (ev, side) =>\n      this.setState({\n        [side]: ev.target.value\n      });\n\n    const validateLengths = (side1, side2, side3) => {\n      const isValid = (side, nr) => {\n        const key = `side${nr}Err`;\n        if (side === '') {\n          this.setState({\n            [key]: {\n              message: 'Input field is empty'\n            }\n          });\n        } else if (side <= 0) {\n          this.setState({\n            [key]: {\n              message: 'A positive number is required'\n            }\n          });\n        }\n      };\n      isValid(side1, '1');\n      isValid(side2, '2');\n      isValid(side3, '3');\n      return !this.state.side1Err && !this.state.side2Err && !this.state.side3Err;\n    };\n\n    const getTriangleType = () => {\n      this.setState({\n        side1Err: false,\n        side2Err: false,\n        side3Err: false\n      });\n      const { side1, side2, side3 } = this.state;\n      if (validateLengths(side1, side2, side3)) {\n        if (side1 === side2 && side2 === side3 && side1 === side3) {\n          this.setState({\n            triangleType: 'equilateral'\n          });\n        } else if (side1 === side2 || side2 === side3 || side1 === side3) {\n          this.setState({\n            triangleType: 'isosceles'\n          });\n        } else {\n          this.setState({\n            triangleType: 'scalene'\n          });\n        }\n      }\n    };\n\n    return (\n      <div>\n        <div data-ts=\"Board\" className=\"board\">\n          <div data-ts=\"Panel\">\n          <form data-ts=\"Form\">\n            <fieldset className=\"ts-fieldset\">\n              <label className={classNames({'ts-error': this.state.side1Err})}>\n                <span>Side 1</span>\n                <input\n                  type=\"number\"\n                  onChange={ev => onChange(ev, 'side1')}\n                />\n              </label>\n              {\n                this.state.side1Err &&\n                <dl className=\"ts-errors\">\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side1Err.message}</dd>\n                </dl>\n              }\n            </fieldset>\n            <fieldset className=\"ts-fieldset\">\n              <label className={classNames({'ts-error': this.state.side2Err})}>\n                <span>Side 2</span>\n                <input\n                  type=\"number\"\n                  onChange={ev => onChange(ev, 'side2')}\n                />\n              </label>\n              {\n                this.state.side2Err &&\n                <dl className=\"ts-errors\">\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side2Err.message}</dd>\n                </dl>\n              }\n            </fieldset>\n            <fieldset className=\"ts-fieldset\">\n              <label className={classNames({'ts-error': this.state.side3Err})}>\n                <span>Side 3</span>\n                <input\n                  type=\"number\"\n                  onChange={ev => onChange(ev, 'side3')}\n                />\n              </label>\n              {\n                this.state.side3Err &&\n                <dl className=\"ts-errors\">\n                  <dt>Invalid value</dt>\n                  <dd>{this.state.side3Err.message}</dd>\n                </dl>\n              }\n            </fieldset>\n            <div className='button-wrapper'>\n              <button\n                data-ts=\"Button\"\n                className=\"ts-primary\"\n                onClick={getTriangleType}\n              >\n                <span>Get triangle type</span>\n              </button>\n            </div>\n          </form>\n          {\n            !!this.state.triangleType && !this.state.side1Err && !this.state.side2Err && !this.state.side3Err &&\n            <div className='triangle-type'>\n              Triangle is <b>{this.state.triangleType}</b>\n            </div>\n          }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}